What NodeJs is?
===============
-NodeJS is a Runtime Environment to execute JavaScript on server side
-Allows to run JavaScript on the server(outside the browser).
-Built on Google Chrome's JavaScript V8 Engine. 
-Single threaded, non-blocking, and event-driven execution model.
-It is used to develop I/O intensive web applications. 
-ex:video streaming sites, real-time chat application, Game servers and web applications.
-NodeJS is not the best choice for CPU intensive work.(Complex calculations)

javascript Engines:
	V8  - is developed by Google , Google Chrome.
	SpiderMonkey - is developed by Mozilla , Firefox.
	JavaScriptCore  - is Apple's engine for its Safari browser. 
	Chakra  - is the JavaScript engine of the Internet Explorer browser.
	

	Browser					 Node.js
======================================================
-DOM (document)				-No DOM
-Window						-No Window (global)
-Cookies					-No Cookies
-Offline Storage            -No Offline Storage
-No FileSystem				-FileSystem
-Database Interaction(No)	-Database Interaction(yes)
-Client Apps/ UI			-Server side Apps / Back-End
-Consume APIs				-Develop APIs



Key Features of Node.js
=======================
Asynchronous and Event Driven:
	All APIs of Node Js are asynchronous. 
	This feature means that if  Node receives a request for some Input/Output operation, it will execute that operation in the background and continue with the processing of other requests. 
	Thus it will not wait for the response from the previous requests.
It's very fast:
	Node Js uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome. 
	Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests in NodeJS is faster.
Single Threaded but Highly Scalable:
	Node Js uses a single thread model for event looping. 
	The response from these events may or may not reach the server immediately. 
	However, this does not block other operations. 
	Thus making Node.js highly scalable. 
	Traditional servers create limited threads to handle requests while Node.js creates	a single thread that provides service to much larger numbers of such requests.
Node js library uses JavaScript:
	The majority of developers are already well-versed in JavaScript. 
	Hence, development in Node.js becomes easier for a developer who knows JavaScript.
Community:
	There is an Active and vibrant community for the Node Js framework - The active community always keeps the framework updated with the latest trends in the web development.
No Buffering:
	Node js applications never buffer any data. 
	They simply output the data in chunks.
NPM (Node Package Manager)
	it comes with node js & allows us to install various Packages for Node js Application. (lodash,cors,axios,express)



V8 JavaScript Engine
====================
-V8 is the name of the JavaScript engine that powers Google Chrome.
-V8 takes our JavaScript and executes it while browsing with Chrome.
-The same V8 Engine is used in NodeJS also.
-V8 is written in C++, and it's continuously improved.
-JavaScript is generally considered an interpreted language, but modern JavaScript engines no longer just interpret JavaScript, they compile it.
-JavaScript is internally compiled by V8 

JS Code --> V8  -->  Parsing  --> Abstract Syntax Tree  --> ByteCode --> Machine Code  --> Runs On CPU




What Can Node.js Do?
====================
-Node.js can generate dynamic page content.
-Node.js can create, open, read, write, delete, and close files on the server.
-Node.js can collect form data.
-Node.js can add, delete, modify data in the database.



How NodeJs works/NodeJs Process Model
=====================================
-In the traditional web server model, each request is handled by a dedicated thread from the thread pool.
If no thread is available in the thread pool at any point of time then the request waits till the next available thread. 
-Dedicated thread executes a particular request and does not return to thread pool until it completes the execution and returns a response.

-All the user requests are handled by a single thread and all the I/O work or long running job is performed asynchronously for a particular request. 
-single thread(Event Loop) doesn't have to wait for the request to complete and is free to handle the next request. 
-When asynchronous I/O work completes, worker thread informs event loop,eventloop sends the response back to client. 



-Internally, Node.js uses libuv for the event loop which in turn uses internal C++ thread pool to provide asynchronous I/O.

https://cdn.buttercms.com/0Nh1yR6SSPwqnsKYSfHa
https://www.scholarhat.com/tutorial/nodejs/nodejs-vs-other-server-side-frameworks
 
process.env.UV_THREADPOOL_SIZE=6  (4 default, max 128)
Worker Threads- File System API, Cryptography, Compression, DNS Lookup




The Workflow of Node.js Architecture:
======================================
-Clients send requests to the webserver to interact with the web application. Requests can be non-blocking or blocking:
            -Querying for data
            -Deleting data 
            -Updating the data
			-Adding Data In to database
-Node.js retrieves the incoming requests and adds those requests to the Event Queue
-The requests are then passed one-by-one through the Event Loop. It checks if the requests are simple enough to not require any external resources
-Event Loop processes simple requests (non-blocking operations), such as I/O Polling, and returns the responses to the corresponding clients
-A single thread from the Thread Pool is assigned to a single complex request. This thread is responsible for completing a particular blocking request by accessing the external resources, such as compute, database, file system, etc.
-Once, the task is carried out completely, the response is sent to the Event Loop that in turn sends that response back to the Client



NodeJs vs Others
================
-A common task for a web server can be to open a file on the server and return the content to the client.

Here is how PHP or ASP handles a file request:
	1. Sends the task to the computer's file system.
	2. Waits while the file system opens and reads the file.
	3. Returns the content to the client.
	4. Ready to handle the next request.
Here is how Node.js handles a file request:
	1. Sends the task to the computer's file system.
	2. Ready to handle the next request.
	3. When the file system has opened and read the file, the server returns the content to the client.
-Node.js eliminates the waiting, and simply continues with the next request.
-Node.js runs single-threaded, non-blocking, asynchronously programming, which is very memory efficient.



Blocking vs Non-Blocking I/O
============================
-waiter takes the order and gives it to chef.
 while the chef is preparing that order, 
 waiter will take new orders and will give it back to the chef.
 waiter doesn't wait for the chef to prepare the food.
-Non-blocking I/O operations allow a single process to serve multiple requests at the same time. -Instead of the process being blocked and waiting for I/O operations to complete, the I/O operations are delegated to the system, so that the process can execute the next piece of code. -Non-blocking I/O operations provide a callback function that is called when the operation is completed.
-Blocking methods execute synchronously and non-blocking methods execute asynchronously.
-let's consider a case where each request to a web server takes 50ms to complete and 45ms of that 50ms is database I/O that can be done asynchronously. Choosing non-blocking asynchronous operations frees up that 45ms per request to handle other requests. This is a significant difference in capacity just by choosing to use non-blocking methods instead of blocking methods.


Q. What is Reactor Pattern in Node.js?
-Assigning a callback function to each I/O operation is called the Reactor Pattern.
-Itâ€™s the responsibilty of the system to run the handler function once the data from the event is available.