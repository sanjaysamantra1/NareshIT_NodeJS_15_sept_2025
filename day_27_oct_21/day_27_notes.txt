Use a Logging Service to track and store errors in production
=============================================================
-To improve error management, we can integrate logging services
-Winston or Morgan can be used for logging error details to external files or monitoring services. 
-These are helpful for production environments



Morgan 
======
-Morgan is a popular HTTP request logger middleware for Node.js.
-Alternatives Packages to morgan are : Winston / Bunyan / Pino
-It simplifies the process of logging HTTP requests in a Node.js application by automatically generating logs for incoming requests.
-Morgan provides various logging formats and options, allowing developers to customize the logging output according to their requirements.
-Logging formats : combined / common / short / tiny / dev
1. npm i morgan
2. const morgan = require('morgan');
   app.use(morgan('tiny'));
   app.use(morgan('dev'));
   app.use(morgan(':method :url :status :res[content-length] - :response-time ms'));


Winston
=======
-winston is a logging library with support for multiple transports(console, file)

// Configure Winston logger
const logger = winston.createLogger({
  level: 'info', // Log level: 'error', 'warn', 'info', 'http', 'verbose', 'debug', 'silly'
  format: winston.format.json(),
  transports: [
    new winston.transports.Console(), // Log to the console
    new winston.transports.File({ filename: 'app.log' }) // Log to a file
  ]
});

// Middleware to log each request
app.use((req, res, next) => {
  logger.info(`HTTP ${req.method} ${req.url}`);
  next();
});

// Error handling middleware
app.use((err, req, res, next) => {
  logger.error(`Error: ${err.message}`);
  res.status(500).send('Something went wrong!');
});
