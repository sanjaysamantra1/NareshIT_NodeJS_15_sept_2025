yarn package Manager
====================
-Yarn is an open-source package manager used to manage dependencies in JavaScript projects. 
-It assists with the process of installing, updating, configuring, and removing packages/dependencies

npm install -g yarn

yarn --version
yarn --help

yarn init -y
yarn add minimist
yarn add mocha --dev
yarn add minimist@latest
yarn add minimist@2.3.1
yarn install 
yarn install --production
yarn install --offline ( trigger an error if any required dependencies are not available in local cache)
yarn remove minimist
yarn upgrade <package>
yarn run [script-name]
yarn list
yarn outdated
yarn audit     (runs a security audit)



package.json
============
-Contains Project Metadata(name, version, author, description, scripts, main , dependencies)
-Helps NPM to understand how the project should be handled along with its dependencies.
-maintains version range (^ , ~)
-Nested Dependencies : No
-It's Created(tools) & maintained by Developers

package-lock.json
=================
-Automatically generated by npm when we install dependencies.
-Exact version of dependency
-Nested Dependencies : Yes
-The resolved URLs (npm registry or elsewhere)
-Ensures reproducible builds (everyone gets the same dependency versions)


package.json  VS  package-lock.json
===================================
-package.json maintains only the main packages's information.
 "cors": "^2.8.5"
 "bootstrap" : "^5.2.1"
-package-lock.json containes the exact version. 
	"bootstrap" : "5.3.2" (npm update bootstrap)
-package-lock.json maintains main packages's information + nested-packages information
    "node_modules/cors": {  
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      }
-package.json lists the required dependencies and their version ranges, but not the exact versions to be installed.
-package-lock.json is used to ensure that the same dependencies are installed across different environments and prevent conflicts due to different versions being installed.

-package.json is created and modified manually by the developer.
-It is automatically generated by npm and updated whenever we install or update packages.

-in package.json (~) tells go up to hot-fixes 1.4.X if 1.4.1 is installed
 in package.json (^) checks if there is a newer version under 1.x.x if 1.4.1 is installed
 in package-lock.json - there is neither ~ nor ^

Ex: bootstrap - 5.1.3
              major.minor.hotfix


NPX
===
NPX : Node Package Executer (used to execute Node.js packages)
-Run Packages without installing them.
-When you install NPM version 5.2.0 or higher, get NPX installed
-we can install npx using the below command
 npm i -g npx
-npx helps us avoid versioning, dependency issues and installing unnecessary packages that we just want to try out.
-npx helps running utility tools without installation (eslint, mocha)
 npx eslint .
 npx mocha
-ex:npx create-react-app my-sample-react-app
    npx nodemon file1.js	
	npx nodemon file1.js -y




Nodemon
=======
-Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.
-Nodemon can be installed using NPM.
 ex:- npm i -g nodemon
-Nodemon can be used without installing also, using npx
 npx nodemon file1.js
-nodemon help
 nodemon -h 
 nodemon --help
-Just use nodemon instead of node to run your code, your process will automatically restart when your code changes
 ex:- node file1.js      (server won't be re-started when code is changed)
      nodemon file1.js   (server gets re-started when there is a code change)
	  npx nodemon file1.js   (server gets re-started when there is a code change)
-The 'node_modules' folder is ignored by default by nodemon.
-You can restart the process at any time by typing 'rs' and hitting enter.
